{"version":3,"sources":["architectsolid.svg","config/firebase.js","pages/result.js","components/AppHeader.js","pages/search.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","mockxxx","database","AppHeader","AppBar","position","Toolbar","Typography","variant","color","useStyles","makeStyles","table","Width","LandResultTable","useState","useEffect","ref","once","then","snapshot","val","console","log","classes","React","page","setPage","rowsPerPage","setRowsPerPage","to","Button","href","style","margin","target","download","Paper","elevation","TableContainer","Table","stickyHeader","className","aria-label","size","TableHead","TableRow","TableCell","TableBody","data","slice","map","key","name","price","link","TablePagination","rowsPerPageOptions","component","count","length","onChangePage","event","newPage","onChangeRowsPerPage","value","HomePageHeader","padding","Stock","persquaremeter","location","district","province","comparison","Search","src","logo","alt","noValidate","autoComplete","TextField","id","label","withStyles","theme","main","spacing","breakpoints","down","CssBaseline","path","Result","Home","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b8062bb4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/architectsolid.33982a0c.svg\";","import * as firebase from \"firebase/app\";\nimport \"firebase/database\";\n\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDlsOJK_IyiZEhP3vAIfR0VQK3N4she84U\",\n    authDomain: \"socialeye-seniorproject.firebaseapp.com\",\n    databaseURL: \"https://socialeye-seniorproject.firebaseio.com\",\n    projectId: \"socialeye-seniorproject\",\n    storageBucket: \"socialeye-seniorproject.appspot.com\",\n    messagingSenderId: \"209273349716\",\n    appId: \"1:209273349716:web:06abba1d7cb9e2a67f6fc1\",\n    measurementId: \"G-T04J1XK538\"\n  };\n  \n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n  const database = firebase.database();\n  \n  export { database }","import React, { useEffect, useState } from \"react\";\n\nimport \"../App.css\";\n// import { stockData } from \"../mockupjson\";\nimport data from '../teedin108.json'\nimport { database } from \"../config/firebase\";\n\nimport {\n  Button,\n  TextField,\n  makeStyles,\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TablePagination,\n  Paper,\n} from \"@material-ui/core\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useParams,\n} from \"react-router-dom\";\nimport \"fontsource-roboto\";\n\n// useEffect(\n//   database.ref('/').on(\"value\", snapshot => {\n//     const mockupData = snapshot\n// },[])\n\nconst useStyles = makeStyles({\n  table: {\n    Width: 300,\n  },\n});\n\nvar mockxxx \n\nexport const LandResultTable = () => {\n  const [mockupdata, setData] = useState();\n\n  useEffect(() => {\n    database\n      .ref(\"/\")\n      .once(\"value\")\n      .then(function (snapshot) {\n        mockxxx = snapshot.val()\n        \n        // setData(snapshot.val());\n      });\n  });\n  console.log(mockxxx)\n  // console.log(\"Mockup \", mockupdata);\n\n  const classes = useStyles();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n  // const stringJSON = JSON.stringify(database)\n  // console.log(\"database \", database)\n  return (\n    <>\n      <HomePageHeader />\n      <Link to=\"/\">\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          href=\"#outlined-buttons\"\n          style={{ margin: 10 }}\n        >\n          Home\n        </Button>\n      </Link>\n      <Link to={\"/mockupjson.js\"} target=\"_blank\" download>\n        <Button variant=\"contained\" color=\"primary\">\n          Download JSON\n        </Button>\n      </Link>\n      <Paper elevation={3}>\n        <TableContainer>\n          <Table\n            stickyHeader\n            className={classes.table}\n            aria-label=\"simple table\"\n            size=\"small\"\n          >\n            <TableHead>\n              <TableRow>\n                <TableCell>Name</TableCell>\n                <TableCell>Price</TableCell>\n                <TableCell>Link</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {data\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((data, key) => {\n                  return (\n                    <Stock\n                      key={key}\n                      name={data.name}\n                      price={data.price}\n                      // size={data.size}\n                      // persquaremeter={data.persquaremeter}\n                      // location={data.location}\n                      // district={data.district}\n                      // province={data.province}\n                      // comparison={data.comparisonwithaverage}\n                      link={data.link}\n                    />\n                  );\n                })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[10, 25, 100]}\n          component=\"div\"\n          count={data.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n    </>\n  );\n};\n\nconst HomePageHeader = () => {\n  return (\n    <header className=\"header\">\n      {/* <Typography variant=\"h2\" className=\"header\">\n        The Social Eye\n      </Typography> */}\n      <Typography variant=\"h4\" className=\"header\" style={{ padding: 10 }}>\n        Result for \"Saimai\"\n      </Typography>\n    </header>\n  );\n};\n\nconst Stock = ({\n  name,\n  price,\n  size,\n  persquaremeter,\n  location,\n  district,\n  province,\n  comparison,\n  link,\n}) => {\n  // if (!name) return null;\n  return (\n    <TableRow>\n      <TableCell>{name}</TableCell>\n      <TableCell>{price}</TableCell>\n      {/* <TableCell>{size}</TableCell>\n      <TableCell>{persquaremeter}</TableCell>\n      <TableCell>{location}</TableCell>\n      <TableCell>{district}</TableCell>\n      <TableCell>{province}</TableCell>\n      <TableCell>{comparison}</TableCell> */}\n      <TableCell>\n        <a href={link}>Link</a>\n      </TableCell>\n    </TableRow>\n  );\n};\n","import React from 'react';\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n} from '@material-ui/core';\n\nconst AppHeader = () => (\n  <AppBar position=\"static\">\n    <Toolbar>\n      <Typography variant=\"h6\" color=\"inherit\">\n        The Social Eye\n      </Typography>\n    </Toolbar>\n  </AppBar>\n);\n\nexport default AppHeader;","import React, { Fragment } from 'react';\nimport logo from '../architectsolid.svg';\nimport { Button, TextField, makeStyles, Typography } from '@material-ui/core';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useParams\n} from \"react-router-dom\";\nimport '../App.css';\n\n\nexport const Search = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} alt=\"logo\" />\n        <Typography variant=\"h3\" className=\"header\">The social eye</Typography>\n        <form noValidate autoComplete=\"off\">\n          <TextField id=\"standard-basic\" label=\"Search\" />\n        </form>\n        <br />\n        <Link to=\"/result\">\n          <Button variant=\"contained\" color=\"primary\">Go</Button>\n        </Link>\n      </header>\n    </div>\n  );\n}","import React, { Fragment } from 'react';\nimport {\n  CssBaseline,\n  withStyles,\n} from '@material-ui/core';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport \"./config/firebase\";\nimport AppHeader from './components/AppHeader';\nimport { LandResultTable } from \"./pages/result\";\nimport \"./App.css\";\nimport \"./pages/search.js\"\nimport { Search } from \"./pages/search.js\";\n\n\nconst styles = theme => ({\n  main: {\n    padding: theme.spacing(3),\n    [theme.breakpoints.down('xs')]: {\n      padding: theme.spacing(2),\n    },\n  },\n});\n\nconst App = ({ classes }) => (\n  <Fragment>\n    <CssBaseline />\n    <AppHeader />\n    <main className={classes.main}>\n      <Router>\n        <div>\n\n          <Switch>\n            <Route path=\"/result\">\n              <Result />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </main>\n  </Fragment>\n);\n\nexport default withStyles(styles)(App);\n\nfunction Home() {\n  return <div className=\"App\">\n    < Search />\n  </div>\n}\n\nfunction Result() {\n  return (\n    <div className=\"App\">\n      < LandResultTable />\n    </div>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}